name: 🛡️ Praetorian CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # 🔍 Code Quality & Security
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Lint code
        run: npm run lint

      - name: 🔧 Type check
        run: npm run build

  # 🧪 Testing & Coverage
  test:
    name: 🧪 Testing & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false --verbose=false

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true

      - name: 🧬 Mutation Testing
        run: npm run test:mutation
        continue-on-error: true

  # 📦 Build & Package
  build:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Build project
        run: npm run build

      - name: 📦 Package size analysis
        run: |
          echo "📊 Bundle size analysis:"
          du -sh dist/
          echo "📁 Directory structure:"
          find dist/ -type f -name "*.js" -exec wc -l {} + | tail -1

  # 🚀 Release (only on main branch)
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [code-quality, test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Build project
        run: npm run build

      - name: 📦 Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: true
          body: |
            ## 🚀 Praetorian CLI ${{ github.ref_name }} Release

            ### ✨ New Features
            - **Pipeline Mode** - CI/CD friendly output with `--pipeline` flag
            - **Dual Output Modes** - User-friendly detailed output + concise pipeline output
            - **DevSecOps Integration** - Ready for Jenkins, GitHub Actions, Dockerfile, Makefile

            ### 🔧 Improvements
            - Enhanced CLI with professional banner
            - Improved test coverage (1,201 tests)
            - Better error handling and validation

            ### 📦 Installation
            ```bash
            npm install -g @syntropysoft/praetorian
            ```

            ### 🚀 Usage
            ```bash
            # User mode (detailed output)
            praetorian validate --config praetorian.yaml

            # Pipeline mode (CI/CD friendly)
            praetorian validate --config praetorian.yaml --pipeline
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 📊 Security Audit
  security-audit:
    name: 📊 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔒 Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | grep -q '"vulnerabilities":{}'; then
            echo "✅ No high-severity vulnerabilities found"
          else
            echo "❌ High-severity vulnerabilities detected"
            npm audit --audit-level=high
            exit 1
          fi
